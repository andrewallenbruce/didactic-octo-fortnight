/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => autoGlossary
});
module.exports = __toCommonJS(main_exports);
var import_obsidian4 = require("obsidian");

// src/modal.ts
var import_obsidian2 = require("obsidian");

// src/utils.ts
var import_obsidian = require("obsidian");
function getEnum(value) {
  let result = "glossaryIndex" /* gi */;
  switch (value.toLowerCase()) {
    case "glossary":
      result = "glossary" /* g */;
      break;
    case "index":
      result = "index" /* i */;
      break;
    case "glossaryindex":
      result = "glossaryIndex" /* gi */;
      break;
    default:
      break;
  }
  return result;
}
function fileExists(fileName) {
  const notesTFiles = global.app.vault.getMarkdownFiles();
  let result;
  result = notesTFiles.some((file) => file.name.contains(fileName));
  if (result) {
    new import_obsidian.Notice("Already existing file" + fileName + ".md");
  }
  return result;
}
async function cleanFiles(notesTFiles) {
  const { vault } = this.app;
  let cleanedNotes = [];
  notesTFiles.forEach(async (file) => {
    const fileContent = await vault.cachedRead(file);
    if (!fileContent.toString().contains("---\ntags: obsidian-auto-glossary\n---\n")) {
      cleanedNotes.push(file);
    }
  });
  return cleanedNotes;
}

// src/modal.ts
var CreateFileModal = class extends import_obsidian2.Modal {
  constructor(app, onSubmit, passedFolder, passedName, passedOption) {
    super(app);
    this.onSubmit = onSubmit;
    this.chosenFolder = passedFolder ? passedFolder : "";
    this.fileName = passedName ? passedName : "";
    this.option = passedOption ? passedOption : "";
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h1", { text: "AutoGlossary" });
    new import_obsidian2.Setting(contentEl).setName("Folder").setDesc("The folder to get the files indexed from.").addText((text) => text.onChange((value) => {
      this.chosenFolder = value;
    }).setValue(this.chosenFolder));
    new import_obsidian2.Setting(contentEl).setName("Same destination as folder").setDesc("If on, the file will be created in the same folder specified above and the 'Destination' field will be disabled.").addToggle((toggle) => toggle.setValue(true).onChange((value) => {
      destination.setDisabled(value);
      if (value) {
        this.destFolder = this.chosenFolder;
      }
    }));
    let destination = new import_obsidian2.Setting(contentEl);
    destination.setName("Destination").setDesc("If the toggle above is on, specify here the destination folder for the file created.").addText((text) => text.onChange((value) => {
      this.destFolder = value;
    }).setValue(this.destFolder).setDisabled(true)).setDisabled(true);
    new import_obsidian2.Setting(contentEl).setName("File name").setDesc("The name of the created file.").addText((text) => text.onChange((value) => {
      this.fileName = value;
    }).setValue(this.fileName));
    new import_obsidian2.Setting(contentEl).setName("File order").setDesc("The order for the files to be indexed.").addDropdown((drop) => drop.addOption("default", "Default").addOption("mtime_new", "Modification time - Newest to oldest").addOption("mtime_old", "Modification time - Oldest to newest").addOption("ctime_new", "Creation time - Newest to oldest").addOption("ctime_old", "Creation time - Oldest to newest").addOption("alphabetical", "Alphabetical").addOption("alphabetical_rev", "Alphabetical - Reverse").setValue("default").onChange((chosen) => {
      this.fileOrder = chosen;
    }));
    new import_obsidian2.Setting(contentEl).setName("File type").setDesc("Choose between index, glossary or both.").addDropdown((drop) => drop.addOption("glossary", "Glossary").addOption("index", "Index").addOption("glossaryindex", "Glossary with index").onChange((chosen) => {
      this.option = chosen;
    }).setValue(this.option ? this.option : "index"));
    new import_obsidian2.Setting(contentEl).addButton((btn) => btn.setButtonText("Submit").setCta().onClick(() => {
      if (!this.fileName) {
        this.fileName = this.option;
      }
      if (!fileExists(this.fileName)) {
        this.close();
        this.onSubmit(this.option, this.fileName, this.chosenFolder, this.fileOrder, this.destFolder);
      }
    }));
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
  }
};

// src/glossaryIndex.ts
var import_obsidian3 = require("obsidian");
async function getFiles(requestedFile, fileInclusion, fileName, chosenFolder, fileOrder) {
  let notesTFile = global.app.vault.getMarkdownFiles();
  let notes = [];
  if (!fileInclusion) {
    notesTFile = await cleanFiles(notesTFile);
  }
  switch (fileOrder) {
    case "ctime_new":
      notesTFile.sort((a, b) => b.stat.ctime - a.stat.ctime);
      break;
    case "ctime_old":
      notesTFile.sort((a, b) => a.stat.ctime - b.stat.ctime);
      break;
    case "mtime_new":
      notesTFile.sort((a, b) => b.stat.mtime - a.stat.mtime);
      break;
    case "mtime_old":
      notesTFile.sort((a, b) => a.stat.mtime - b.stat.mtime);
      break;
    case "alphabetical":
      notesTFile.sort((a, b) => {
        const nameA = a.name.toUpperCase();
        const nameB = b.name.toUpperCase();
        if (nameA < nameB) {
          return -1;
        }
        if (nameA > nameB) {
          return 1;
        }
        return 0;
      });
      break;
    case "alphabetical_rev":
      notesTFile.sort((a, b) => {
        const nameA = a.name.toUpperCase();
        const nameB = b.name.toUpperCase();
        if (nameA > nameB) {
          return -1;
        }
        if (nameA < nameB) {
          return 1;
        }
        return 0;
      });
      break;
    case "default":
    default:
      break;
  }
  notesTFile.forEach((file) => {
    if (chosenFolder && file.path.includes(chosenFolder)) {
      notes.push(file.name);
    } else if (!chosenFolder) {
      notes.push(file.name);
    }
  });
  const glossaryArray = [];
  const indexArray = [];
  notes.forEach((note) => {
    const noteName = note.slice(0, -3);
    if (requestedFile == "glossaryIndex" /* gi */) {
      indexArray.push("- [[" + fileName + "#" + noteName + "|" + noteName + "]]\n");
    } else {
      indexArray.push("- [[" + noteName + "]]\n");
    }
    glossaryArray.push("#### ![[" + noteName + "]]\n\n***\n\n");
  });
  const indexText = "## Index\n" + indexArray.toString().replace(/,/g, "");
  const glossaryText = "## Glossary\n" + glossaryArray.toString().replace(/,/g, "");
  return [indexText, glossaryText];
}
async function createFile(requestedFile, fileInclusion, fileName, chosenFolder, fileOrder, destFolder) {
  let completeFileName = "";
  if (destFolder) {
    if (fileName) {
      completeFileName = destFolder + "/" + fileName;
    } else {
      completeFileName = destFolder + "/" + requestedFile;
    }
  } else if (chosenFolder) {
    if (fileName) {
      completeFileName = chosenFolder + "/" + fileName;
    } else {
      completeFileName = chosenFolder + "/" + requestedFile;
    }
  } else {
    completeFileName = requestedFile;
  }
  if (!fileExists(completeFileName)) {
    this.app.vault.create(completeFileName + ".md", await createText(requestedFile, fileInclusion, fileName, chosenFolder, fileOrder));
    new import_obsidian3.Notice(`${completeFileName} file created`);
  }
}
async function createText(requestedFile, fileInclusion, fileName, chosenFolder, fileOrder) {
  let array = await getFiles(requestedFile, fileInclusion, fileName, chosenFolder, fileOrder);
  let text = "---\ntags: obsidian-auto-glossary\n---\n";
  switch (requestedFile) {
    case "glossary" /* g */:
      text += array[1];
      break;
    case "index" /* i */:
      text += array[0];
      break;
    case "glossaryIndex" /* gi */:
      text += array[0] + "\n***\n\n" + array[1];
      break;
    default:
      break;
  }
  return text;
}

// src/main.ts
var DEFAULT_SETTINGS = {
  fileInclusion: false
};
var autoGlossary = class extends import_obsidian4.Plugin {
  async onload() {
    console.log("Auto Glossary enabled");
    await this.loadSettings();
    this.registerEvent(this.app.workspace.on("file-menu", (menu, folder) => {
      if (folder instanceof import_obsidian4.TFolder) {
        menu.addItem((item) => {
          item.setTitle("Create index file").setIcon("list").onClick(async () => {
            new CreateFileModal(this.app, (option, fileName, chosenFolder, fileOrder, destFolder) => {
              createFile(getEnum(option), this.settings.fileInclusion, fileName, chosenFolder, fileOrder, destFolder);
            }, folder.path, folder.name + "_Index", "index").open();
          });
        });
      }
    }));
    this.registerEvent(this.app.workspace.on("file-menu", (menu, folder) => {
      if (folder instanceof import_obsidian4.TFolder) {
        menu.addItem((item) => {
          item.setTitle("Create glossary file").setIcon("layout-list").onClick(async () => {
            new CreateFileModal(this.app, (option, fileName, chosenFolder, fileOrder, destFolder) => {
              createFile(getEnum(option), this.settings.fileInclusion, fileName, chosenFolder, fileOrder, destFolder);
            }, folder.path, folder.name + "_Glossary", "glossary").open();
          });
        });
      }
    }));
    this.registerEvent(this.app.workspace.on("file-menu", (menu, folder) => {
      if (folder instanceof import_obsidian4.TFolder) {
        menu.addItem((item) => {
          item.setTitle("Create index+glossary file").setIcon("list-ordered").onClick(async () => {
            new CreateFileModal(this.app, (option, fileName, chosenFolder, fileOrder, destFolder) => {
              createFile(getEnum(option), this.settings.fileInclusion, fileName, chosenFolder, fileOrder, destFolder);
            }, folder.path, folder.name + "_GlossaryIndex", "glossaryindex").open();
          });
        });
      }
    }));
    this.addCommand({
      id: "create-glossary",
      name: "Create glossary",
      callback: () => {
        new CreateFileModal(this.app, (option, fileName, chosenFolder, fileOrder, destFolder) => {
          createFile(getEnum(option), this.settings.fileInclusion, fileName, chosenFolder, fileOrder, destFolder);
        }).open();
      }
    });
    this.addSettingTab(new SettingTab(this.app, this));
  }
  onunload() {
    console.log("Auto Glossary disabled");
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var SettingTab = class extends import_obsidian4.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Auto Glossary Settings" });
    new import_obsidian4.Setting(containerEl).setName("File inclusion").setDesc("Include previously generated files in glossaries and indexes").addToggle((toggle) => toggle.setValue(this.plugin.settings.fileInclusion).onChange(async (value) => {
      console.log("fileInclusion switched to " + value);
      this.plugin.settings.fileInclusion = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
