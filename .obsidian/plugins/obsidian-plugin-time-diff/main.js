/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => TimeDiffPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var import_obsidian2 = require("obsidian");
var TimeDiffPlugin = class extends import_obsidian.Plugin {
  onload() {
    return __async(this, null, function* () {
      const timeRegex = /\d{2}:\d{2} - \d{2}:\d{2}/g;
      this.registerMarkdownCodeBlockProcessor("timediff", (source, el, _ctx) => {
        let totalSumInMinutes = 0;
        const rows = source.split("\n").filter((row) => row.length > 0);
        for (const row of rows) {
          const match = row.match(timeRegex);
          if (!match) {
            const div3 = el.createEl("div");
            div3.createEl("span", {
              text: `${row}`
            });
            continue;
          }
          const timeElements = match[0].trim().split(" - ");
          const [left, right] = timeElements.map((timeElement) => {
            const [hours, minutes] = timeElement.split(":");
            return (0, import_obsidian2.moment)().hours(Number(hours)).minutes(Number(minutes));
          });
          const totalDiffInMinutes = right.diff(left, "minutes");
          totalSumInMinutes += totalDiffInMinutes;
          const { readableDiff } = calculateTimeDiffs(totalDiffInMinutes);
          const div2 = el.createEl("div");
          div2.createEl("span", {
            text: `${row}`
          });
          div2.createEl("span", {
            text: `	${readableDiff}`,
            cls: "timediff-accent"
          });
        }
        const div = el.createEl("div");
        div.createEl("span", {
          text: `Total: `
        });
        div.createEl("span", {
          text: `${calculateTimeDiffs(totalSumInMinutes).readableDiff}`,
          cls: "timediff-accent"
        });
      });
    });
  }
  onunload() {
  }
};
function calculateTimeDiffs(totalDiffInMinutes) {
  const diffInHours = Math.floor(totalDiffInMinutes / 60);
  const diffInMinutes = totalDiffInMinutes % 60;
  const readableDiff = `${diffInHours}h${diffInMinutes}min`;
  return { diffInHours, diffInMinutes, readableDiff };
}
